node:
  cluster: service-one-envoy #Este campo es el service-name en Jaeger

#admin: #Acceso a la consola web de administración: metricas, etc.
#  access_log_path: /tmp/admin_access.log
#  address:
#    socket_address: { address: 127.0.0.1, port_value: 9901 }

static_resources:
  listeners:
    - name: service-one-listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 9010 } #Binding para escuchar las peticiones
      traffic_direction: OUTBOUND #Doc dice que este campo es importante en Windows. Confirmar diferencia entre OUTBOUND e INBOUND
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log: #Si se desea pintar el access_log en consola (útil para dev)
                  - name: envoy.file_access_log
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /dev/stdout
                      log_format:
                        text_format_source:
                          inline_string: "[ACCESS_LOG][%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" \"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\"\n"
                tracing: #Configuración para enviar datos de trazabilidad a Jaeger
                  provider:
                    name: envoy.tracers.zipkin
                    typed_config:
                      "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
                      collector_cluster: zipkin-cluster
                      collector_endpoint: "/api/v2/spans"
                      shared_span_context: true #Confirmar significado real de este parámetro
                      collector_endpoint_version: HTTP_JSON
                generate_request_id: true
                stat_prefix: ingress_http
                codec_type: AUTO
                route_config:
                  name: service-one-route
                  virtual_hosts:
                    - name: service-one-service
                      domains: [ "*" ]
                      routes:
                        - match: { prefix: "/" }
                          route: { cluster: service-one-cluster }
                          decorator: { operation: hello }
                http_filters:
                  - name: envoy.filters.http.router
    - name: service-two-listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 9210 } #Binding para escuchar las peticiones
      traffic_direction: OUTBOUND #Doc dice que este campo es importante en Windows. Confirmar diferencia entre OUTBOUND e INBOUND
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log: #Si se desea pintar el access_log en consola (útil para dev)
                  - name: envoy.file_access_log
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /dev/stdout
                      log_format:
                        text_format_source:
                          inline_string: "[ACCESS_LOG][%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" \"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\"\n"
                tracing: #Configuración para enviar datos de trazabilidad a Jaeger
                  provider:
                    name: envoy.tracers.zipkin
                    typed_config:
                      "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
                      collector_cluster: zipkin-cluster
                      collector_endpoint: "/api/v2/spans"
                      shared_span_context: true #Confirmar significado real de este parámetro
                      collector_endpoint_version: HTTP_JSON
                generate_request_id: true
                stat_prefix: egress_http_two
                codec_type: AUTO
                route_config:
                  name: service-two-route
                  virtual_hosts:
                    - name: service-two-service
                      domains: [ "*" ]
                      routes:
                        - match: { prefix: "/" }
                          route: { cluster: service-two-cluster }
                          decorator: { operation: hello }
                http_filters:
                  - name: envoy.filters.http.router
    - name: service-three-listener
      address:
        socket_address: { address: 0.0.0.0, port_value: 9310 } #Binding para escuchar las peticiones
      traffic_direction: OUTBOUND #Doc dice que este campo es importante en Windows. Confirmar diferencia entre OUTBOUND e INBOUND
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log: #Si se desea pintar el access_log en consola (útil para dev)
                  - name: envoy.file_access_log
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /dev/stdout
                      log_format:
                        text_format_source:
                          inline_string: "[ACCESS_LOG][%START_TIME%] \"%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%\" %RESPONSE_CODE% %RESPONSE_FLAGS% %BYTES_RECEIVED% %BYTES_SENT% %DURATION% %RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)% \"%REQ(X-FORWARDED-FOR)%\" \"%REQ(USER-AGENT)%\" \"%REQ(X-REQUEST-ID)%\" \"%REQ(:AUTHORITY)%\" \"%UPSTREAM_HOST%\" \"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\"\n"
                tracing: #Configuración para enviar datos de trazabilidad a Jaeger
                  provider:
                    name: envoy.tracers.zipkin
                    typed_config:
                      "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
                      collector_cluster: zipkin-cluster
                      collector_endpoint: "/api/v2/spans"
                      shared_span_context: true #Confirmar significado real de este parámetro
                      collector_endpoint_version: HTTP_JSON
                generate_request_id: true
                stat_prefix: egress_http_three
                codec_type: AUTO
                route_config:
                  name: service-three-route
                  virtual_hosts:
                    - name: service-three-service
                      domains: [ "*" ]
                      routes:
                        - match: { prefix: "/" }
                          route: { cluster: service-three-cluster }
                          decorator: { operation: hello }
                http_filters:
                  - name: envoy.filters.http.router
  clusters:
    - name: service-one-cluster
      connect_timeout: 0.25s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: service-one-cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1 #IP del servicio backend
                      port_value: 8010 #Puerto del servicio backend
    - name: service-two-cluster
      connect_timeout: 0.25s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: service-two-cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1 #IP del servicio backend
                      port_value: 9020 #Puerto del servicio backend
    - name: service-three-cluster
      connect_timeout: 0.25s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: service-three-cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1 #IP del servicio backend
                      port_value: 9030 #Puerto del servicio backend
    - name: zipkin-cluster
      connect_timeout: 1s
      type: STATIC
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: zipkin
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 127.0.0.1
                      port_value: 9411
